{"version":3,"sources":["images/image.png","api/index.js","components/Cards/CardItem.js","components/Cards/index.js","components/Header/CountryPicker/CountryPicker.js","components/Chart/LineGrap.js","components/Chart/index.js","components/Header/Header.js","components/Map/CountryCircle/CountryCircle.js","components/Map/Map.js","components/Progress.js","components/Tables.js","App.js","serviceWorker.js","index.js","components/Map/CountryCircle/CountryCircle.module.css","components/Header/CountryPicker/CountryPicker.module.css","App.module.css","components/Header/Header.module.css","components/Map/Map.module.css"],"names":["module","exports","url","fetchData","country","changeableUrl","fetch","then","response","json","catch","err","console","log","fetchCountries","useStyles","makeStyles","root","minWidth","borderTop","props","borderColor","cursor","title","fontSize","pos","marginTop","today","total","date","onHandler","classes","Card","className","onClick","CardContent","Typography","color","gutterBottom","variant","component","numeral","format","Date","toDateString","data","casesType","todayCases","todayRecovered","todayDeaths","cases","recovered","deaths","updated","Grid","container","spacing","item","sm","xs","CardItem","CountryPicker","useState","countryValue","setCountryValue","Container","FormControl","Select","value","onChange","event","target","displayEmpty","inputProps","MenuItem","ItemName","map","key","countryInfo","iso2","CountryFlag","src","flag","alt","lineTitle","lineContainer","height","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","casesTypeColors","backgroundColor","LineGrap","datasets","setData","useEffect","error","lastDataPoint","dataType","ChartData","newSingleData","x","y","push","bieldChartData","Header","loading","countriesData","logoContainer","CovidLogo","logoImage","hex","rgb","half_op","multiplier","CountryCircle","Circle","center","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","InfoContainer","InfoFlag","style","backgroundImage","InfoName","InfoConfirmed","InfoRecovered","InfoDeaths","Map","countries","zoom","MapContainer","TileLayer","attribution","theme","width","Progress","LinearProgress","StyledTableCell","withStyles","head","palette","primary","main","common","white","body","TableCell","StyledTableRow","action","hover","TableRow","borderBottom","boxShadow","headerTitle","marginBottom","table","CustomizedTables","TableContainer","Paper","Table","size","stickyHeader","aria-label","TableBody","sort","a","b","tableDataProses","scope","align","App","state","mapCenter","lng","mapZoom","initData","setState","fetchCountriesData","countryPickerHandler","cardHandler","this","maxWidth","md","Cards","MapCard","MapCardContent","Chart","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.63731fb4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","const url = \"https://disease.sh/v3/covid-19\";\n\nexport const fetchData = (country) => {\n   let changeableUrl = `${url}/all`;\n   if (country) {\n      changeableUrl = `${url}/countries/${country}`;\n   }\n   return fetch(changeableUrl)\n      .then((response) => response.json())\n      .catch((err) => console.log(err));\n};\n\nexport const fetchCountries = () => {\n   return fetch(`${url}/countries`)\n      .then((response) => response.json())\n      .catch((err) => console.log(err));\n};\n\nexport const fetchTotalData = () => {\n   return fetch(`${url}/historical/all?lastdays=120`)\n      .then((response) => response.json())\n      .catch((err) => console.log(err));\n};\n","import React from 'react';\nimport numeral from 'numeral';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n   root: {\n      minWidth: '100%',\n      borderTop: (props) => `8px solid ${props.borderColor}`,\n      cursor: 'pointer',\n   },\n   title: {\n      fontSize: 16,\n   },\n   pos: {\n      marginTop: 12,\n   },\n});\n\nexport default (props) => {\n   const { title, today, total, date, onHandler } = props;\n   const classes = useStyles(props);\n\n   return (\n      <Card className={classes.root} onClick={onHandler}>\n         <CardContent>\n            <Typography\n               className={classes.title}\n               color=\"textSecondary\"\n               gutterBottom\n            >\n               {title}\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n               {numeral(today).format('+0.00a')}\n            </Typography>\n            <Typography className={classes.pos}>\n               {`${numeral(total).format('0.00a')} Total`}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\" color=\"textSecondary\">\n               {new Date(date).toDateString()}\n            </Typography>\n         </CardContent>\n      </Card>\n   );\n};\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport CardItem from './CardItem';\n\nexport default ({ data, onHandler, casesType }) => {\n   const {\n      todayCases,\n      todayRecovered,\n      todayDeaths,\n      cases,\n      recovered,\n      deaths,\n      updated,\n   } = data;\n\n   return (\n      <Grid container spacing={3}>\n         <Grid item sm={4} xs={12}>\n            <CardItem\n               onHandler={() => onHandler('cases')}\n               title=\"Infected\"\n               today={todayCases}\n               total={cases}\n               date={updated}\n               borderColor={\n                  casesType === 'cases' ? 'rgba(204, 16, 52, 1)' : 'transparent'\n               }\n            />\n         </Grid>\n         <Grid item sm={4} xs={12}>\n            <CardItem\n               onHandler={() => onHandler('recovered')}\n               title=\"Recovered\"\n               today={todayRecovered}\n               total={recovered}\n               date={updated}\n               borderColor={\n                  casesType === 'recovered'\n                     ? 'rgb(125, 215, 29)'\n                     : 'transparent'\n               }\n            />\n         </Grid>\n         <Grid item sm={4} xs={12}>\n            <CardItem\n               onHandler={() => onHandler('deaths')}\n               title=\"Deaths\"\n               today={todayDeaths}\n               total={deaths}\n               borderColor={\n                  casesType === 'deaths' ? 'rgba(255, 0, 0, 1)' : 'transparent'\n               }\n               date={updated}\n            />\n         </Grid>\n      </Grid>\n   );\n};\n","import React, { useState } from 'react';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport classes from './CountryPicker.module.css';\nimport PublicIcon from '@material-ui/icons/Public';\n\nexport default function CountryPicker({ onHandler, data }) {\n   const [countryValue, setCountryValue] = useState('');\n   const handleChange = (event) => {\n      setCountryValue(event.target.value);\n      onHandler(event.target.value);\n   };\n\n   return (\n      <div className={classes.Container}>\n         <FormControl className={classes.FormControl}>\n            <Select\n               value={countryValue}\n               onChange={handleChange}\n               displayEmpty\n               inputProps={{ 'aria-label': 'Without label' }}\n               variant=\"outlined\"\n            >\n               <MenuItem value=\"\">\n                  <div className={classes.ItemName}>\n                     <span>Worldwide</span>\n                     <PublicIcon />\n                  </div>\n               </MenuItem>\n               {data[0] &&\n                  data.map((country) => (\n                     <MenuItem\n                        key={country.country}\n                        value={country.countryInfo.iso2}\n                     >\n                        <div className={classes.ItemName}>\n                           <span>{country.country}</span>\n                           <img\n                              className={classes.CountryFlag}\n                              src={country.countryInfo.flag}\n                              alt=\"...\"\n                           />\n                        </div>\n                     </MenuItem>\n                  ))}\n            </Select>\n         </FormControl>\n      </div>\n   );\n}\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport numeral from 'numeral';\nimport { makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(() => ({\n   lineTitle: {\n      marginTop: 15,\n   },\n   lineContainer: {\n      marginTop: 15,\n      height: 250,\n   },\n}));\n\nconst options = {\n   legend: {\n      display: false,\n   },\n   elements: {\n      point: {\n         radius: 0,\n      },\n   },\n   maintainAspectRatio: false,\n   tooltips: {\n      mode: 'index',\n      intersect: false,\n      callbacks: {\n         label: function (tooltipItem, data) {\n            return numeral(tooltipItem.value).format('+0,0');\n         },\n      },\n   },\n   scales: {\n      xAxes: [\n         {\n            type: 'time',\n            time: {\n               format: 'MM/DD/YY',\n               tooltipFormat: 'll',\n            },\n         },\n      ],\n      yAxes: [\n         {\n            gridLines: {\n               display: false,\n            },\n            ticks: {\n               // Include a dollar sign in the ticks\n               callback: function (value, index, values) {\n                  return numeral(value).format('0a');\n               },\n            },\n         },\n      ],\n   },\n};\n\nconst casesTypeColors = {\n   cases: {\n      borderColor: '#CC1034',\n      backgroundColor: 'rgba(204, 16, 52, 0.5)',\n   },\n   recovered: {\n      borderColor: '#7dd71d',\n      backgroundColor: 'rgba(125, 215, 29, 0.5)',\n   },\n   deaths: {\n      borderColor: '#fb4443',\n      backgroundColor: 'rgba(251, 68, 67, 0.5)',\n   },\n};\n\nconst LineGrap = ({ data, casesType = 'cases' }) => {\n   const classes = useStyles();\n\n   return (\n      <>\n         <h3 className={classes.lineTitle}>Worldwide new {casesType}</h3>\n         <div className={classes.lineContainer}>\n            <Line\n               data={{\n                  datasets: [\n                     {\n                        ...casesTypeColors[casesType],\n                        data: data,\n                     },\n                  ],\n               }}\n               options={options}\n            />\n         </div>\n      </>\n   );\n};\n\nexport default LineGrap;\n","import React, { useState, useEffect } from 'react';\nimport { fetchTotalData } from '../../api';\nimport LineGrap from './LineGrap';\n\nconst bieldChartData = (data, dataType = 'cases') => {\n   let ChartData = [];\n   let lastDataPoint;\n\n   for (let date in data[dataType]) {\n      if (lastDataPoint) {\n         const newSingleData = {\n            x: date,\n            y: data[dataType][date] - lastDataPoint,\n         };\n         ChartData.push(newSingleData);\n      }\n      lastDataPoint = data[dataType][date];\n   }\n   return ChartData;\n};\n\nexport default ({ country, casesType = 'cases' }) => {\n   const [data, setData] = useState([]);\n\n   useEffect(() => {\n      fetchTotalData().then((data) => {\n         if (data.error) {\n            console.log(data.error);\n         } else {\n            setData(bieldChartData(data, casesType));\n         }\n      });\n   }, [casesType]);\n\n   return <LineGrap data={data} casesType={casesType} />;\n};\n","import React from 'react';\nimport CountryPicker from './CountryPicker/CountryPicker';\nimport CovidLogo from '../../images/image.png';\nimport classes from './Header.module.css';\n\nconst Header = ({ loading, countriesData, onHandler }) => {\n   return (\n      <div className={classes.logoContainer}>\n         <img src={CovidLogo} className={classes.logoImage} alt=\"...\" />\n         {!loading && (\n            <CountryPicker data={countriesData} onHandler={onHandler} />\n         )}\n      </div>\n   );\n};\n\nexport default Header;\n","import React from 'react';\nimport { Circle, Popup } from 'react-leaflet';\nimport numeral from 'numeral';\nimport classes from './CountryCircle.module.css';\n\nconst casesTypeColors = {\n   cases: {\n      hex: '#CC1034',\n      rgb: 'rgb(204, 16, 52)',\n      half_op: 'rgba(204, 16, 52, 0.5)',\n      multiplier: 800,\n   },\n   recovered: {\n      hex: '#7dd71d',\n      rgb: 'rgb(125, 215, 29)',\n      half_op: 'rgba(125, 215, 29, 0.5)',\n      multiplier: 1200,\n   },\n   deaths: {\n      hex: '#fb4443',\n      rgb: 'rgb(251, 68, 67)',\n      half_op: 'rgba(251, 68, 67, 0.5)',\n      multiplier: 2000,\n   },\n};\n\nconst CountryCircle = ({ data, casesType = 'cases' }) => {\n   return data.map((country) => (\n      <Circle\n         key={country.country}\n         center={[country.countryInfo.lat, country.countryInfo.long]}\n         color={casesTypeColors[casesType].hex}\n         fillColor={casesTypeColors[casesType].hex}\n         fillOpacity={0.4}\n         radius={\n            Math.sqrt(country[casesType]) *\n            casesTypeColors[casesType].multiplier\n         }\n      >\n         <Popup>\n            <div className={classes.InfoContainer}>\n               <div\n                  className={classes.InfoFlag}\n                  style={{\n                     backgroundImage: `url(${country.countryInfo.flag})`,\n                  }}\n               ></div>\n               <div className={classes.InfoName}>{country.country}</div>\n               <div className={classes.InfoConfirmed}>\n                  Cases: {numeral(country.cases).format('0,0')}\n               </div>\n               <div className={classes.InfoRecovered}>\n                  Recovered: {numeral(country.recovered).format('0,0')}\n               </div>\n               <div className={classes.InfoDeaths}>\n                  Deaths: {numeral(country.deaths).format('0,0')}\n               </div>\n            </div>\n         </Popup>\n      </Circle>\n   ));\n};\n\nexport default CountryCircle;\n","import React from 'react';\nimport { Map as MapContainer, TileLayer } from 'react-leaflet';\nimport CountryCircle from './CountryCircle/CountryCircle';\nimport classes from './Map.module.css';\n\nconst Map = ({ countries, casesType, center, zoom }) => {\n   return (\n      <div className={classes.Map}>\n         <MapContainer\n            className={classes.MapContainer}\n            center={center}\n            zoom={zoom}\n         >\n            <TileLayer\n               url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n               attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            />\n            <CountryCircle data={countries} casesType={casesType} />\n         </MapContainer>\n      </div>\n   );\n};\n\nexport default Map;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles((theme) => ({\n   root: {\n      width: '210px',\n      '& > * + *': {\n         marginTop: theme.spacing(2),\n      },\n   },\n}));\n\nexport default function Progress() {\n   const classes = useStyles();\n\n   return (\n      <div className={classes.root}>\n         <LinearProgress />\n      </div>\n   );\n}\n","import React from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport numeral from 'numeral';\n\nconst StyledTableCell = withStyles((theme) => ({\n   head: {\n      backgroundColor: theme.palette.primary.main,\n      color: theme.palette.common.white,\n   },\n   body: {\n      fontSize: 14,\n   },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n   root: {\n      '&:nth-of-type(odd)': {\n         backgroundColor: theme.palette.action.hover,\n      },\n   },\n}))(TableRow);\n\nconst useStyles = makeStyles((theme) => ({\n   container: {\n      borderBottom: `1px solid ${theme.palette.action.hover}`,\n      boxShadow: 'none',\n      height: '400px',\n   },\n   headerTitle: {\n      marginBottom: 15,\n      marginTop: 5,\n   },\n   table: {\n      minWidth: '100%',\n   },\n}));\n\nconst tableDataProses = (data, type) => {\n   return data.sort((a, b) => (a[type] > b[type] ? -1 : 1));\n};\n\nexport default function CustomizedTables({ data, dataType = 'cases' }) {\n   const classes = useStyles();\n   return (\n      <>\n         <h3 className={classes.headerTitle}>Live Cases by Country</h3>\n         <TableContainer className={classes.container} component={Paper}>\n            <Table\n               className={classes.table}\n               size=\"small\"\n               stickyHeader\n               aria-label=\"sticky table\"\n            >\n               <TableBody>\n                  {data[0] &&\n                     tableDataProses(data, dataType).map((country) => (\n                        <StyledTableRow key={country.country}>\n                           <StyledTableCell component=\"th\" scope=\"row\">\n                              {country.country}\n                           </StyledTableCell>\n                           <StyledTableCell align=\"right\">\n                              {numeral(country[dataType]).format('0,0')}\n                           </StyledTableCell>\n                        </StyledTableRow>\n                     ))}\n               </TableBody>\n            </Table>\n         </TableContainer>\n      </>\n   );\n}\n","import React, { Component } from 'react';\nimport { Card, CardContent, Container, Grid } from '@material-ui/core';\nimport { fetchData, fetchCountries } from './api';\nimport { Cards, Header, Chart, Map } from './components';\nimport Progress from './components/Progress';\nimport Tables from './components/Tables';\nimport classes from './App.module.css';\nimport 'leaflet/dist/leaflet.css';\n\nclass App extends Component {\n   state = {\n      data: {},\n      countriesData: [],\n      loading: true,\n      country: '',\n      casesType: 'cases',\n      mapCenter: { lat: 20.80746, lng: -0.4796 },\n      mapZoom: 2,\n   };\n\n   initData = (country) => {\n      fetchData(country).then((data) => {\n         if (data.error) {\n            console.log(data.error);\n         } else {\n            if (country) {\n               this.setState({\n                  data,\n                  mapCenter: {\n                     lat: data.countryInfo.lat,\n                     lng: data.countryInfo.long,\n                  },\n                  mapZoom: 4,\n               });\n            } else {\n               this.setState({\n                  data,\n                  mapCenter: { lat: 20.80746, lng: -0.4796 },\n                  mapZoom: 2,\n               });\n            }\n         }\n      });\n   };\n\n   fetchCountriesData = () => {\n      fetchCountries().then((data) => {\n         if (data.error) {\n            console.log(data.error);\n         } else {\n            this.setState({ countriesData: data, loading: false });\n         }\n      });\n   };\n\n   componentDidMount() {\n      this.initData();\n      this.fetchCountriesData();\n   }\n\n   countryPickerHandler = (country) => {\n      this.initData(country);\n      this.setState({ country });\n   };\n\n   cardHandler = (casesType) => {\n      this.setState({ casesType });\n   };\n\n   render() {\n      const {\n         loading,\n         country,\n         countriesData,\n         casesType,\n         mapCenter,\n         mapZoom,\n      } = this.state;\n      return (\n         <div className={classes.App}>\n            <Container maxWidth=\"xl\">\n               <Header\n                  countriesData={countriesData}\n                  loading={loading}\n                  onHandler={this.countryPickerHandler}\n               />\n               {loading ? (\n                  <Progress />\n               ) : (\n                  <>\n                     <Grid container spacing={3}>\n                        <Grid item md={8} sm={12} xs={12}>\n                           <Cards\n                              data={this.state.data}\n                              onHandler={this.cardHandler}\n                              casesType={casesType}\n                           />\n                           <Card className={classes.MapCard}>\n                              <CardContent className={classes.MapCardContent}>\n                                 <Map\n                                    countries={countriesData}\n                                    casesType={casesType}\n                                    center={mapCenter}\n                                    zoom={mapZoom}\n                                 />\n                              </CardContent>\n                           </Card>\n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                           <Card className={''}>\n                              <CardContent>\n                                 <Tables data={countriesData} />\n                                 <Chart\n                                    country={country}\n                                    casesType={casesType}\n                                 />\n                              </CardContent>\n                           </Card>\n                        </Grid>\n                     </Grid>\n                  </>\n               )}\n            </Container>\n         </div>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InfoFlag\":\"CountryCircle_InfoFlag__38EqF\",\"InfoName\":\"CountryCircle_InfoName__2BEz6\",\"InfoContainer\":\"CountryCircle_InfoContainer__pL4KH\",\"InfoConfirmed\":\"CountryCircle_InfoConfirmed__23sk8\",\"InfoRecovered\":\"CountryCircle_InfoRecovered__29U9-\",\"InfoDeaths\":\"CountryCircle_InfoDeaths__20pcD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CountryPicker_Container__1oidn\",\"FormControl\":\"CountryPicker_FormControl__1sa8P\",\"ItemName\":\"CountryPicker_ItemName__3SSPV\",\"CountryFlag\":\"CountryPicker_CountryFlag__VC2Su\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"MapCard\":\"App_MapCard__3WQcv\",\"MapCardContent\":\"App_MapCardContent__3iJa4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logoContainer\":\"Header_logoContainer__gaEZM\",\"logoImage\":\"Header_logoImage__2KwYz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Map\":\"Map_Map__lBUCh\",\"MapContainer\":\"Map_MapContainer__DjkX8\"};"],"sourceRoot":""}